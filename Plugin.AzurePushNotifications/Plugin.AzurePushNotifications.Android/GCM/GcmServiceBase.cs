using System;
using WindowsAzure.Messaging;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Plugin.AzurePushNotifications;

namespace Gcm.Client
{
    [Preserve(AllMembers = true)]
    public abstract class GcmServiceBase : IntentService
    {
        private const string WakelockKey = "GCM_LIB";

        private const int MaxBackoffMs = 3600000; //1 hour
        private const string ExtraToken = "token";
        private static PowerManager.WakeLock sWakeLock;

        private static readonly object Lock = new object();
        private static int serviceId = 1;

        protected static NotificationHub Hub;

        private readonly Random sRandom = new Random();

        private readonly string token = "";

        /// <summary>
        ///     The GCM Sender Ids to use. Set by the constructor taking parameters but not by the one that doesn't. Be very
        ///     careful changing this value, preferably only set it in your constructor and only once.
        /// </summary>
        protected string[] SenderIds;

        protected GcmServiceBase()
        {
            SenderIds = new[] {PushNotificationCredentials.GoogleApiSenderId};
        }

        public GcmServiceBase(params string[] senderIds)
            : base("GCMIntentService-" + serviceId++)
        {
            SenderIds = senderIds;
        }

        protected virtual void OnMessage(Context context, Intent intent)
        {
        }

        protected virtual void OnDeletedMessages(Context context, int total)
        {
        }

        protected virtual bool OnRecoverableError(Context context, string errorId)
        {
            return true;
        }

        protected virtual void OnError(Context context, string errorId)
        {
        }

        protected virtual void OnRegistered(Context context, string registrationId)
        {
            Hub = new NotificationHub(PushNotificationCredentials.AzureNotificationHubName, PushNotificationCredentials.AzureListenConnectionString, context);
            try
            {
                Hub.UnregisterAll(registrationId);
            }
            catch(Exception ex)
            {
                //Log.Error(PushNotificationsBroadcastReceiver.Tag, ex.Message);
            }

            try
            {
                var hubRegistration = Hub.Register(registrationId, PushNotificationCredentials.Tags);
            }
            catch(Exception ex)
            {
                //Log.Error(PushNotificationsBroadcastReceiver.Tag, ex.Message);
            }
        }

        protected virtual void OnUnRegistered(Context context, string registrationId)
        {
            Hub?.Unregister();
        }

        protected override void OnHandleIntent(Intent intent)
        {
            try
            {
                var context = ApplicationContext;
                var action = intent.Action;

                if(action.Equals(Constants.IntentFromGcmRegistrationCallback))
                {
                    HandleRegistration(context, intent);
                }
                else if(action.Equals(Constants.IntentFromGcmMessage))
                {
                    // checks for special messages
                    var messageType = intent.GetStringExtra(Constants.ExtraSpecialMessage);
                    if(messageType != null)
                    {
                        if(messageType.Equals(Constants.ValueDeletedMessages))
                        {
                            var sTotal = intent.GetStringExtra(Constants.ExtraTotalDeleted);
                            if(!string.IsNullOrEmpty(sTotal))
                            {
                                var nTotal = 0;
                                if(int.TryParse(sTotal, out nTotal))
                                {
                                    //Logger.Debug("Received deleted messages notification: " + nTotal);
                                    OnDeletedMessages(context, nTotal);
                                }
                            }
                        }
                    }
                    else
                    {
                        OnMessage(context, intent);
                    }
                }
                else if(action.Equals(Constants.IntentFromGcmLibraryRetry))
                {
                    var token = intent.GetStringExtra(ExtraToken);

                    if(!string.IsNullOrEmpty(token) && !this.token.Equals(token))
                    {
                        // make sure intent was generated by this class, not by a
                        // malicious app.
                        //Logger.Debug("Received invalid token: " + token);
                        return;
                    }

                    // retry last call
                    if(GcmClient.IsRegistered(context))
                    {
                        GcmClient.InternalUnRegister(context);
                    }
                    else
                    {
                        GcmClient.InternalRegister(context, SenderIds);
                    }
                }
            }
            finally
            {
                // Release the power lock, so phone can get back to sleep.
                // The lock is reference-counted by default, so multiple
                // messages are ok.

                // If OnMessage() needs to spawn a thread or do something else,
                // it should use its own lock.
                lock(Lock)
                {
                    //Sanity check for null as this is a public method
                    if(sWakeLock != null)
                    {
                        //Logger.Debug("Releasing Wakelock");
                        sWakeLock.Release();
                    }
                }
            }
        }

        internal static void RunIntentInService(Context context, Intent intent, Type classType)
        {
            lock(Lock)
            {
                if(sWakeLock == null)
                {
                    // This is called from BroadcastReceiver, there is no init.
                    var pm = PowerManager.FromContext(context);
                    sWakeLock = pm.NewWakeLock(WakeLockFlags.Partial, WakelockKey);
                }
            }

            //Logger.Debug("Acquiring wakelock");
            sWakeLock.Acquire();
            //intent.SetClassName(context, className);
            intent.SetClass(context, classType);

            context.StartService(intent);
        }

        private void HandleRegistration(Context context, Intent intent)
        {
            var registrationId = intent.GetStringExtra(Constants.ExtraRegistrationId);
            var error = intent.GetStringExtra(Constants.ExtraError);
            var unregistered = intent.GetStringExtra(Constants.ExtraUnregistered);

            //Logger.Debug("handleRegistration: registrationId = " + registrationId + ", error = " + error + ", unregistered = " + unregistered);

            // registration succeeded
            if(registrationId != null)
            {
                GcmClient.ResetBackoff(context);
                GcmClient.SetRegistrationId(context, registrationId);
                OnRegistered(context, registrationId);
                return;
            }

            // unregistration succeeded
            if(unregistered != null)
            {
                // Remember we are unregistered
                GcmClient.ResetBackoff(context);
                var oldRegistrationId = GcmClient.ClearRegistrationId(context);
                OnUnRegistered(context, oldRegistrationId);
                return;
            }

            // last operation (registration or unregistration) returned an error;
            //Logger.Debug("Registration error: " + error);
            // Registration failed
            if(Constants.ErrorServiceNotAvailable.Equals(error))
            {
                var retry = OnRecoverableError(context, error);

                if(retry)
                {
                    var backoffTimeMs = GcmClient.GetBackoff(context);
                    var nextAttempt = backoffTimeMs/2 + sRandom.Next(backoffTimeMs);

                    //Logger.Debug("Scheduling registration retry, backoff = " + nextAttempt + " (" + backoffTimeMs + ")");

                    var retryIntent = new Intent(Constants.IntentFromGcmLibraryRetry);
                    retryIntent.PutExtra(ExtraToken, token);

                    var retryPendingIntent = PendingIntent.GetBroadcast(context, 0, retryIntent, PendingIntentFlags.OneShot);

                    var am = AlarmManager.FromContext(context);
                    am.Set(AlarmType.ElapsedRealtime, SystemClock.ElapsedRealtime() + nextAttempt, retryPendingIntent);

                    // Next retry should wait longer.
                    if(backoffTimeMs < MaxBackoffMs)
                    {
                        GcmClient.SetBackoff(context, backoffTimeMs*2);
                    }
                }
            }
            else
            {
                // Unrecoverable error, notify app
                OnError(context, error);
            }
        }
    }
}